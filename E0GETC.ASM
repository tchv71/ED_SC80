;
;	E0GETC.ASM -	ED SC80  get symbol module (OS dependent)
;			RK version (hardware dependent)
;			Uses external PPI_ADR

?Ctrl	equ	40h
?Shift	equ	20h

IFNDEF	PPI_ADR
EXTRN	PPI_ADR
ENDIF

; Return SYMBOL and SHIFT/CNTRL flags
; 	40h - CNTRL  &  80h - SHIFT
;	B - SYMBOL or MASK
;	C - SYMBOL
GETCHC::
	CALL	GETCHR
	PUSH	H
	push	psw
	PUSH	D
	ANI	3FH
	MOV	C,A
	LDA	@CTRL
	MOV	E,A
	;LDA	PPI+2
	LHLD	PPI_ADR
	INX	H
	INX	H
	CALL	_in
	ANA	E
	MOV	A,C
	JNZ	$+5
	ORI	40H
	MOV	C,A

	LDA	@SHFT
	MOV	E,A
	ANA	E
	MOV	A,C
	JNZ	$+5
	ORI	80H
	mov	b,a
	POP	D
	pop	psw
	mov	c,a
	POP	H
	RET

IFDEF	CPM
BIOS_CONIN:
	LHLD	1
	LXI	D,6
	DAD	D
	INX	H
	MOV	E,M
	INX	H
	MOV	D,M
	XCHG
	INX	H
	MOV	E,M
	INX	H
	MOV	D,M
	XCHG
	PCHL

GETCHR::
	PUSH	H
	PUSH	D
	PUSH	B
	CALL	BIOS_CONIN
	POP	B
	POP	D
	POP	H
	RET

ELSE
; Get character from concole (returns in Acc)
GETCHR::
	PUSH	H
	PUSH	D
	PUSH	B
	CALL	GTC
	;CALL	0F803h
	POP	B
	POP	D
	POP	H
	RET

GTC:	LHLD	PNT
	MOV	A,M
	CPI	0FFH
	JZ	GTCH0
 	INX	H
	SHLD	PNT
	JMP	??RUS

GTCH0:	MVI	B,50
RP3:	PUSH	B
	CALL	GTVECT
	POP	B
	LDA	NREP
	CPI	1
	JNZ	RP1
	XRA	A
	STA	NREP
	DCR	B
	JNZ	RP3
	INR	A
	STA	NREP
	LXI	H,ET1
	SHLD	PNT
	JMP	GTC
RP1:	LDA	NREP
	ORA	A
	JNZ	RP01
	LXI	H,ET1
RP02:	INX	H
	MOV	A,M
	CPI	0FFH
	JNZ	RP02
	SHLD	PNT
	PUSH	H
	CALL	MDEL
	POP	H
	DCX	H
	MOV	A,M
	JMP	??RUS

RP01:	CALL	MDEL
	LXI	H,ET1
	MOV	A,M
	INX	H
	SHLD	PNT
??RUS:	CPI	0FEH
	RNZ
	;LDA	PPI+2
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	INX	H
	MOV	A,M
	XRI	8
	;STA	PPI+2
	MOV	M,A
	POP	H
	JMP	GTC

MDEL:	EI
	LXI	H,1000
RP2:	DCX	H
	MOV	A,H
	ORA	L
	JNZ	RP2
	DI
 	RET

; (ET1) - Pressed keys vector (in order of press)
; (NREP) - Repeat number
GTVECT:	MVI	B,5
GETC0:	PUSH	B
	LDA	@RD
	ORA	A
	MVI	A,0
	STA	@RD
	JNZ	$+6
	CALL	KBDSCN
	POP	B
	LXI	H,PRESS
	MOV	A,M
	CPI	0FFH
	JNZ	GTV04
	DCR	B
	JNZ	GETC0
	STA	ET1
	JMP	GTVECT

GTV04: 	LXI	H,ET2
	LXI	D,ET1
	PUSH	H
	PUSH	D
GTV08:	LDAX	D
	MOV	M,A
	INX	H
	INX	D
	CPI	0FFH
	JNZ	GTV08
	POP	D
	POP	H

GTV00:	MOV	A,M
	CPI	0FFH
	JZ	GTV06

	LXI	B,PRESS
GTV07:	LDAX	B
	CPI	0FFH
	JZ	GTV01
	CMP	M
	INX	B
	JNZ	GTV07
	MVI	M,0FDH
	STAX	D
	INX	D
	DCX	B
	MVI	A,0FDH
	STAX	B
	INX	B
GTV01:	INX	H
	JMP	GTV00

GTV06:	LXI	B,PRESS
	DCX	B
GTV10:	INX	B
	LDAX	B
	CPI	0FDH
	JZ	GTV10
	CPI	0FFH
	JZ	REP
	DCX	B
GTV11:	INX	B
	LDAX	B
	CPI	0FDH
	JZ	GTV11
	CPI	0FFH
	JZ	GTV22
	STAX	D
	INX	D
	JMP	GTV11
GTV22:	XRA	A
	STA	NREP
GTV21:	MVI	A,0FFH
	STAX	D
	RET

REP:	LDA	NREP
	ORA	A
	JZ	GTV31
	LXI	H,ET2
GTV30:	MOV	A,M
	INX	H
	CPI	0FFH
	JZ	GTV31
	CPI	0FDH
	JZ	GTV30
	XRA	A
	STA	NREP
	JMP	GTV21

GTV31:	LDA	NREP
	INR	A
	JZ	GTV21
	STA	NREP
	JMP	GTV21

; (PRESS) -  Pressed keys vector (in order of discover)
KBDSCN:	LXI	B,40H
	LXI	H,PRESS
	LXI	D,807FH

	PUSH	B
	;LDA	PPI+2
	;MOV	B,A
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	INX	H
	MOV	B,M
	POP	H
	LDA	@RUS
	ANA	B
	JNZ	$+6
	MVI	M,0FEH
	INX	H
	POP	B

NORM0:	CALL	?PRESS
	CZ	FOUND
	INR	B
	DCR	C
	JNZ	NORM0
	MVI	M,0FFH
	RET

?PRESS:	CALL	GETMSK
	PUSH	H
	LHLD	PPI_ADR
	MOV	M,E
	;STA	PPI
	;LDA	PPI+1
	NOP
	NOP
	NOP
	INX	H
	MOV	A,M
	POP	H
	ANA	D
	RNZ

	PUSH	H
	LXI	H,200
?PRES0:	;LDA	PPI+1
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	MOV	A,M
	POP	H
	ANA	D
	JNZ	?PRES1
	DCX	H
	MOV	A,H
	ORA	L
	JNZ	?PRES0
?PRES1:	POP	H
	RET


GETMSK:	MOV	A,D
	RLC
	MOV	D,A
	RNC
	MOV	A,E
	RLC
	MOV	E,A
	RET

FOUND:	PUSH	H
	PUSH	D
	PUSH	B
	MOV	A,B
	CPI	3FH
	JNZ	FND01
	MVI	A,20H
	JMP	FND02
FND01:	CPI	10H
	JC	FND03
	ADI	20H
	JMP	FND02
FND03:	MOV	E,B
	MVI	D,0
	LXI	H,KEYBRD
	DAD	D
	MOV	A,M
FND02:	MOV	E,A

	CPI	21H
	CNC	MODCHR
	MOV	A,E
	POP	B
	POP	D
	POP	H
	MOV	M,A
	INX	H
	RET

MODCHR:	MOV	E,A
	CPI	40H
	JNC	MOD4
	CPI	3CH
	JNC	MOD3
MOD4:	;LDA	PPI+2
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	INX	H
	MOV	B,M
	POP	H
	;MOV	B,A
	LDA	@CTRL
	ANA	B
	JZ	SCTRL
	;LDA	PPI+2
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	INX	H
	MOV	A,M
	POP	H
	ANI	8
	JNZ	SHIFT0
	;LDA	PPI+2
	;MOV	B,A
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	INX	H
	MOV	B,M
	POP	H

	LDA	@SHFT
	ANA	B
	JZ	@SHIFT
	RET

MOD3:	;LDA	PPI+2
	;MOV	B,A
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	INX	H
	MOV	B,M
	POP	H
	LDA	@SHFT
	ANA	B
	JNZ	SH3
	RET

SCTRL:	MOV	A,E
	CPI	40H
	RC
	SUI	40H
	MOV	E,A
	RET

SHIFT0:	;LDA	PPI+2
	;MOV	B,A
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	INX	H
	MOV	B,M
	POP	H
	LDA	@SHFT
	ANA	B
	JZ	SH5
	MOV	A,E
	CPI	40H
	RC
	CPI	07Fh
	RZ
	ADI	20H
	MOV	E,A
	RET

@SHIFT:	;LDA	PPI+2
	PUSH	H
	LHLD	PPI_ADR
	INX	H
	INX	H
	MOV	A,M
	POP	H
	ANI	8
	RNZ
SH3:	MOV	A,E
	CPI	40H
	JC	SH5
	CPI	7Fh
	rz
	ADI	20H
	JMP	SH1
SH5:	MOV	A,E
	CPI	40H
	JC	SB
SH1:	MOV	E,A
	RET
SB:	SUI	10H
	CPI	20H
	JNZ	SH1
	MVI	E,5Fh
	RET


KEYBRD:	DB	0CH,1FH,1BH,0,1,2,3,4
	DB	9,0AH,0DH
	DB	7FH; Here was 5FH
	DB	8,19H,18H,1AH
; Following map part may be done more compact algoritmically
; Decrease size by 27 bytes
;	DB	'0123456789:;<=>?'
;	DB	'@ABCDEFGHIJKLMNO'
;	DB	'PQRSTUVWXYZ[\]^ '


@RUS:	DB	80H
@RD:	DB	0

PNT:	DW	ET1
ET1:	DB	0ffh
	ds	9
	;DSEG
NREP:	DS	1
PRESS:	DS	10
ET2:	DS	10
ENDIF
@CTRL:	DB	?Ctrl
@SHFT:	DB	?Shift
IFNDEF	noend
	END
ENDIF


